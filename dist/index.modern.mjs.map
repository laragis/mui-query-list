{"version":3,"file":"index.modern.mjs","sources":["../src/constants.js","../src/context.js","../src/hooks.js","../src/utils/fetchData.js","../src/components/QueryPagination/types/Simple.js","../src/components/QueryPagination/types/Advanced.js","../src/components/QueryPagination/types/Links.js","../src/components/QueryPagination/QueryPagination.js","../src/utils/detectReactObject.js","../src/components/QueryPagination/types/LoadMore.js","../src/components/QueryPagination/types/InfiniteLoading.js","../src/components/QueryList/InfiniteQueryList.js","../src/components/QueryList/SimpleQueryList.js","../src/utils/formatNumber.js","../src/utils/renderList.js","../src/components/QueryList/QueryList.js","../src/utils/renderListItem.js"],"sourcesContent":["export const SIMPLE = 'simple'\nexport const ADVANCED = 'advanced'\nexport const LOAD_MORE = 'load-more'\nexport const LINKS = 'links'\nexport const INFINITE_LOADING = 'infinite-loading'\n\nexport const PAGINATION_TYPES = {\n  [SIMPLE]: 'Simple',\n  [LINKS]: 'Links',\n  [ADVANCED]: 'Advanced',\n  [LOAD_MORE]: 'Load More',\n  [INFINITE_LOADING]: 'Infinite Loading',\n}","import create from 'zustand-store-addons'\nimport createContext from 'zustand/context'\nimport shallow from 'zustand/shallow'\nimport { SIMPLE } from './constants'\nimport produce from 'immer'\nimport { castArray, get } from 'lodash'\n\nexport const createStore = () => create((set, get) => ({\n  pagination: SIMPLE,\n  queryKey: [],\n\n  init: (props) => {\n    let queryKey = [\n      castArray(props.queryKey)[0],\n      {\n        url: props.url,\n        pagination: props.pagination,\n        params: {\n          ...castArray(props.queryKey)[1],\n          page: props.page > 0 ? props.page : 1,\n          perPage: props.perPage > 0 ? props.perPage : 20,\n        }\n      }\n    ]\n\n    set({\n      queryKey,\n      pagination: props.pagination,\n      selected: false\n    })\n  },\n\n  selected: false,\n  setSelected: selected => set({selected}),\n\n  setPage: (page) => set(\n    produce((state) => {\n      state.queryKey[1].params.page = page\n    })\n  ),\n\n  setPerPage: (perPage) => set(\n    produce((state) => {\n      state.queryKey[1].params.perPage = perPage\n    })\n  ),\n}), {\n  computed: {\n    perPage(){\n      return get(this.queryKey, `1.params.perPage`)\n    },\n\n    page(){\n      return get(this.queryKey, `1.params.page`)\n    }\n  }\n})\n\n\nconst context = createContext()\n\nexport const Provider = context.Provider\n\nexport const useStore = (selector, equalityFn) => {\n  return context.useStore(...stateHook(selector, equalityFn))\n}\n\nconst stateHook = (selector, equalityFn) => {\n  if (typeof selector === 'string') {\n    if (selector.indexOf(',') !== -1) {\n      const props = selector.split(',').map(part => part.trim())\n      return [state => props.map(prop => state[prop]), shallow]\n    }\n    return [state => state[selector], equalityFn]\n  }\n  return [selector, equalityFn]\n}\n\n\n// import axios from \"axios\";\n// import { defaultTo, includes, isString, mapKeys, mapValues } from 'lodash'\n// import { SIMPLE } from '../constants'\n//\n// // const requestWatchers = mapValues(mapKeys(['page', 'perPage']), (name) => function(newValue, preValue){\n// //   console.log(name, newValue, preValue);\n// //   this.get().fetchData()\n// // })\n//\n// const defaultPage = 1\n// const defaultPerPage = 10\n//\n// const useQueryStore = create(\n//   (set, get) => ({\n//     loading: false,\n//     setLoading: (loading) => set({ loading }),\n//\n//     url: null,\n//     setUrl: (url) => set({ url }),\n//\n//     pagination: SIMPLE,\n//     setPagination: (pagination) => set({ pagination }),\n//\n//     page: defaultPage,\n//     setPage: (payload) => {\n//       let page = parseInt(payload)\n//\n//       if(page > 0) set({ page })\n//       if(isNaN(page)) set({ page: defaultPage })\n//     },\n//\n//     perPage: defaultPerPage,\n//     setPerPage: (payload) => {\n//       let perPage = parseInt(payload)\n//\n//       if(perPage > 0) set({ perPage })\n//       if(isNaN(perPage)) set({ perPage: defaultPerPage })\n//     },\n//\n//     lastPage: null,\n//\n//     data: [],\n//     setData: (data) => set({ data }),\n//\n//     meta: null,\n//     links: null,\n//     setResponse: (resp) => {\n//       let meta = resp.meta,\n//           data = resp.data\n//\n//       if(includes(['load-more', 'infinite-loading'], get().pagination)) {\n//         meta.from = 1\n//         data = get().data.concat(data)\n//       }\n//\n//       set({\n//         meta,\n//         links: resp.links,\n//         data,\n//         lastPage: resp.meta.last_page\n//       })\n//     },\n//\n//     init: (props) => {\n//       let page = defaultTo(props.page, 1),\n//         perPage = props.perPage,\n//         pagination = defaultTo(props.pagination, 'simple'),\n//         initPage = page,\n//         initPerPage = perPage\n//\n//       if (pagination === 'load-more' && page > 1) {\n//         initPage = 1\n//         initPerPage = perPage * page\n//       }\n//\n//       set({\n//         url: props.url,\n//         page,\n//         perPage,\n//         pagination\n//       })\n//\n//       get().fetchData({\n//         page: initPage,\n//         perPage: initPerPage\n//       })\n//     },\n//\n//     reset: () => {\n//       set({\n//         page: 1,\n//         data: [],\n//       })\n//     },\n//\n//     fetchData: async (params) => {\n//       get().setLoading(true)\n//\n//       try {\n//         const response = await axios(get().getRequest(params)).then(resp => resp.data)\n//         get().setResponse(response)\n//       } catch (err){\n//         console.error(err);\n//       } finally {\n//         get().setLoading(false)\n//       }\n//     },\n//\n//     handleSuccess: null,\n//\n//     setHandleSuccess: (handleSuccess) => set({handleSuccess}),\n//\n//     nextPage: () => {\n//       get().hasNextPage && get().setPage(get().page+1)\n//     },\n//\n//     getRequest: (params = {}) => {\n//       const { page = get().page, perPage = get().perPage} = params\n//\n//       if(isString(get().url)) {\n//         return {\n//           method: 'get',\n//           url: get().url,\n//           params: {\n//             page,\n//             perPage\n//           }\n//         }\n//       }\n//\n//       return get().url\n//     },\n//   }),\n//   {\n//     computed: {\n//\n//       response: function() {\n//         return {\n//           meta: this.meta,\n//           links: this.links,\n//           data: this.data,\n//         }\n//       },\n//\n//       hasNextPage: function(){\n//         return this.page <= this.lastPage\n//       },\n//\n//       hasGoTo: function(){\n//         return this.page <= this.lastPage\n//       }\n//     },\n//     watchers: {\n//\n//     },\n//     middleware: [],\n//     settings: {},\n//   }\n// )\n//\n// export default useQueryStore","import { useQueryClient } from '@tanstack/react-query'\nimport { useStore } from './context'\nimport { useCallback, useEffect, useRef } from 'react'\nimport { debounce, isEmpty } from 'lodash'\nimport { useRafState } from 'react-use'\nimport $ from 'jquery'\n\nexport const useInit = (props) => {\n  const queryClient = useQueryClient()\n\n  const [queryKey, init] = useStore('queryKey, init')\n\n  useEffect(() => {\n    !isEmpty(queryKey) && queryClient.cancelQueries(queryKey)\n\n    init(props)\n  }, [JSON.stringify(props.queryKey), props.url, props.page, props.perPage])\n}\n\nexport const useScrollList = ({scrollTarget, scrollIndex, scrollTop, wait = 300}) => {\n  const ref = useRef()\n\n  const [position, setPostion] = useRafState({\n    x: 0,\n    y: 0,\n  });\n\n  const handler = useCallback((event) => {\n    let positionKeys = scrollTarget ? {x: 'scrollLeft', y: 'scrollTop'} : {x: 'pageXOffset', y: 'pageYOffset'}\n\n    setPostion({\n      x:  ref.current[positionKeys.x],\n      y:  ref.current[positionKeys.y],\n    });\n  }, [scrollTarget])\n\n  useEffect(() => {\n    ref.current = scrollTarget ? document.querySelector(scrollTarget) : window\n\n    ref.current.addEventListener('scroll', debounce(handler, wait));\n\n    return () => {\n      ref.current.removeEventListener('scroll', handler);\n    }\n\n  }, [])\n\n\n  useEffect(() => {\n    // console.log($(`#item-${scrollIndex}`).get(0), scrollIndex);\n    // let element = $(`#item-${scrollIndex}`).get(0)\n    // if(element) scrollIntoView(element, $(scrollTarget).get(0))\n\n    setTimeout(() => {\n      scrollTo($(scrollTarget).get(0))\n    }, 1000)\n    // console.log(scrollIndex);\n  }, [scrollIndex])\n\n  return position\n}","import { isString, isUndefined } from 'lodash'\nimport axios from 'axios'\n\nconst fetchData = async ({ meta, pageParam, queryKey, signal }) => {\n  const { url, params, ...rest } = queryKey[1]\n\n  const request = isString(url)\n    ? {\n      method: 'get',\n      url,\n      params\n    }\n    : {\n      params: {\n        ...params,\n        ...url?.params\n      },\n      ...url\n    }\n\n  if (!isUndefined(pageParam)) request.params.page = pageParam\n\n  const response = await axios({\n    signal,\n    ...request\n  })\n\n  return response.data\n}\n\nexport default fetchData","import React from 'react'\nimport { Pagination as MuiPagination } from '@mui/material'\nimport { useStore } from '../../../context'\n\nfunction Simple({ meta }) {\n  const setPage = useStore('setPage')\n\n  const onChange = (event, value) => setPage(value)\n\n  return (\n    <MuiPagination\n      variant=\"outlined\"\n      showFirstButton\n      showLastButton\n      onChange={onChange}\n      count={meta?.last_page}\n      page={meta?.current_page}\n    />\n  )\n}\n\nexport default Simple","import {\n  MenuItem,\n  Pagination as MuiPagination,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport React, { useMemo } from 'react'\nimport { useStore } from '../../../context'\nimport { flow, sortBy, uniq } from 'lodash'\n\nfunction Advanced({ meta, sizes, size }) {\n  const [perPage, setPerPage, setPage] = useStore(\n    'perPage, setPerPage, setPage'\n  )\n  const lastPage = meta?.last_page\n  const page = meta?.current_page\n\n  const onChange = (event, value) => setPage(value)\n\n  const handleGoto = (event) => {\n    let inputPage = parseInt(event.target.value)\n\n    if (\n      (event.key === 'Enter' || event.type === 'blur') &&\n      inputPage > 0 &&\n      inputPage !== page\n    ) {\n      if (inputPage <= lastPage) {\n        setPage(inputPage)\n      } else {\n        alert(`Not found page ${inputPage}`)\n      }\n    }\n  }\n\n  const handleSizeChange = (event) => setPerPage(parseInt(event.target.value))\n\n  const sizeList = useMemo(\n    () => flow([uniq, sortBy])(sizes.concat(size)),\n    [sizes, size]\n  )\n\n  console.log(sizeList)\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <MuiPagination\n        variant=\"outlined\"\n        showFirstButton\n        showLastButton\n        shape=\"rounded\"\n        onChange={onChange}\n        count={lastPage}\n        page={page}\n      />\n      <TextField\n        select\n        label=\"Size\"\n        value={perPage}\n        onChange={handleSizeChange}\n        size=\"small\"\n        style={{ width: 110 }}\n      >\n        {sizeList.map((value, k) => (\n          <MenuItem key={k} value={value} defaultValue>\n            {value} / page\n          </MenuItem>\n        ))}\n      </TextField>\n      <Typography>Go to</Typography>\n      <TextField\n        label=\"Page\"\n        variant=\"outlined\"\n        onKeyUp={handleGoto}\n        onBlur={handleGoto}\n        size=\"small\"\n        type=\"number\"\n        style={{ width: 85 }}\n      />\n    </Stack>\n  )\n}\n\nAdvanced.defaultProps = {\n  sizes: [10, 20, 50, 100, 200],\n}\n\nexport default Advanced\n","import React from 'react'\nimport { Button, List } from '@mui/material'\nimport { usePagination } from '@mui/lab'\nimport { filter, includes } from 'lodash'\nimport { useStore } from '../../../context'\n\nfunction Links({ meta }) {\n  const setPage = useStore('setPage')\n\n  const { items } = usePagination({\n    count: meta?.last_page,\n    onChange: (event, value) => setPage(value),\n  })\n\n  const filteredItems = filter(items, (item) =>\n    includes(['previous', 'next'], item.type)\n  )\n\n  return (\n    <nav>\n      <List>\n        {filteredItems.map(({ page, type, selected, ...item }, index) => {\n          return (\n            <Button type=\"button\" {...item} key={index}>\n              {type}\n            </Button>\n          )\n        })}\n      </List>\n    </nav>\n  )\n}\n\nexport default Links","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash'\n\nimport Simple from './types/Simple'\nimport Advanced from './types/Advanced'\nimport LoadMore from './types/LoadMore'\nimport Links from './types/Links'\nimport InfiniteLoading from './types/InfiniteLoading'\nimport { ADVANCED, INFINITE_LOADING, LINKS, LOAD_MORE, SIMPLE } from '../../constants'\nimport { isFunctionComponent } from '../../utils/detectReactObject'\nimport { useStore } from '../../context'\n\nfunction QueryPagination(props) {\n  const type = useStore('pagination')\n\n  const Component = isFunctionComponent(type) ? type : get(QueryPagination.types, type, Simple)\n\n  return <Component {...props} />\n}\n\nQueryPagination.propTypes = {\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n}\n\nQueryPagination.types = {\n  [SIMPLE]: Simple,\n  [LINKS]: Links,\n  [ADVANCED]: Advanced,\n  [LOAD_MORE]: LoadMore,\n  [INFINITE_LOADING]: InfiniteLoading,\n}\n\nexport default QueryPagination;","import { isValidElement } from 'react'\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' && !!component.prototype?.isReactComponent\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return (\n    typeof component === 'function' &&\n    // && !!String(component).includes('return React.createElement')  // may fails\n    isValidElement(component())\n  )\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component)\n}\n\nfunction isElement(element) {\n  return isValidElement(element)\n}\n\nfunction isDOMTypeElement(element) {\n  return isElement(element) && typeof element.type === 'string'\n}\n\nfunction isCompositeTypeElement(element) {\n  return isElement(element) && typeof element.type === 'function'\n}\n\nexport {\n  isClassComponent,\n  isFunctionComponent,\n  isReactComponent,\n  isElement,\n  isDOMTypeElement,\n  isCompositeTypeElement,\n}","import React from 'react'\nimport { Button } from '@mui/material'\n\nfunction LoadMore({ queryInfo }) {\n  const { isFetchingNextPage, fetchNextPage, hasNextPage } = queryInfo || {}\n\n  if (!hasNextPage) return 'Nothing more to load'\n\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={() => fetchNextPage()}\n      disabled={!hasNextPage || isFetchingNextPage}\n    >\n      {isFetchingNextPage ? 'Loading more...' : 'Load More'}\n    </Button>\n  )\n}\n\nexport default LoadMore\n","import React from 'react'\nimport { Button, LinearProgress, Stack } from '@mui/material'\nimport { InView } from 'react-intersection-observer'\n\nfunction InfiniteLoading({ queryInfo, data, threshold }) {\n  const { isFetchingNextPage, fetchNextPage, hasNextPage } = queryInfo || {}\n\n  const handleNextPage = (inView) => inView && hasNextPage && fetchNextPage()\n\n  if (!hasNextPage) return ''\n\n  if (isFetchingNextPage)\n    return <LinearProgress className=\"w-full mt-12\" color=\"secondary\" />\n\n  if (threshold) return null\n\n  return (\n    <Stack alignItems=\"center\">\n      <InView\n        as={Button}\n        onClick={() => fetchNextPage()}\n        disabled={!hasNextPage || isFetchingNextPage}\n        onChange={handleNextPage}\n      >\n        Load More\n      </InView>\n    </Stack>\n  )\n}\n\nexport default InfiniteLoading","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { InView } from 'react-intersection-observer'\nimport { get, has, last } from 'lodash'\nimport React, { forwardRef, Fragment, useEffect, useMemo } from 'react'\nimport { INFINITE_LOADING } from '../../constants'\nimport { Box, Button, LinearProgress, Stack } from '@mui/material'\nimport { useInit } from '../../hooks'\nimport { useStore } from '../../context'\nimport fetchData from '../../utils/fetchData'\nimport QueryPagination from '../QueryPagination/QueryPagination'\nimport { scrollTo } from 'scroll-js'\nimport ListItem from '../../utils/renderListItem'\n\nconst InfiniteQueryList = forwardRef((props, ref) => {\n  const { renderListItem: ListItem, renderList: List, wrapperListItem, onRowClicked } = props\n\n  const [queryKey, selected, setSelected] = useStore('queryKey, selected, setSelected')\n\n  const queryInfo = useInfiniteQuery(queryKey, fetchData, {\n    getPreviousPageParam: (firstPage, allPages) => {\n      let previousPage = firstPage.meta.current_page - 1\n      return previousPage > 0 ? previousPage : undefined\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      let nextPage = lastPage.meta.current_page + 1\n      return nextPage <= lastPage.meta.last_page ? nextPage : undefined\n    },\n  })\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = queryInfo\n\n  useInit(props)\n\n  const handleNextPage = (inView, entry, index) => {\n    if (inView && hasNextPage && !has(data, ['pages', index + 1])) {\n      fetchNextPage()\n    }\n  }\n\n  const onScrollTop = () => {\n    scrollTo(document.querySelector(props.scrollTarget) || window, {\n      top: 0,\n      duration: 200,\n    })\n  }\n\n  const firstRow = useMemo(() => get(data, 'pages.0.data.0'), [get(data, 'pages.0.data.0')])\n  const lastPage = last(data?.pages || [])\n\n  const meta = useMemo(() => ({\n    ...get(lastPage, 'meta')\n  }), [lastPage])\n\n  return (\n    <div>\n      {status === 'loading' ? (\n        <LinearProgress className=\"w-full\" color=\"primary\" />\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          {props.page > 1 && (\n            <Button\n              className=\"mb-6\"\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingPreviousPage\n                ? 'Loading more...'\n                : hasPreviousPage\n                  ? 'Load Older'\n                  : 'Nothing more to load'}\n            </Button>\n          )}\n\n          <List meta={meta} firstRow={firstRow}>\n            {data.pages?.map((page, pageIndex) => (\n              <Fragment key={pageIndex}>\n                {page.data.map((item, itemIndex) => {\n                  let serial = itemIndex + page.meta.from,\n                    hasInView = (\n                      props.pagination === INFINITE_LOADING &&\n                      props.threshold &&\n                      props.threshold > 0 &&\n                      props.threshold <= page.data.length &&\n                      page.data.length - props.threshold === itemIndex + 1\n                    ),\n                    onChange = (inView, entry) => handleNextPage(inView, entry, pageIndex),\n                    wrapperListItemProps = {\n                      key: itemIndex,\n                      component: hasInView ? InView : Box,\n                      onChange\n                    },\n                    listItemProps = {\n                      serial,\n                      data: item,\n                      meta: page.meta,\n                      onRowClicked: (e, data) => {\n                        let itemSelected = selected === serial ? false : serial\n\n                        setSelected(itemSelected)\n                        onRowClicked(e, { item: data, selected: itemSelected })\n                      },\n                      selected: serial === selected,\n                      setSelected\n                    }\n\n                  if(!wrapperListItem) return <ListItem key={itemIndex} {...listItemProps} />\n\n                  return (\n                    <Box {...wrapperListItemProps}>\n                      <ListItem {...listItemProps} />\n                    </Box>\n                  )\n                })}\n              </Fragment>\n            ))}\n          </List>\n\n\n\n          {props.backToTop && props.scrollPosition?.y > 400 && (\n            <Button\n              onClick={onScrollTop}\n              className=\"fixed\"\n              sx={{ bottom: 90, right: 100, zIndex: 100 }}\n              variant=\"outlined\"\n            >\n              <i className=\"fa-solid fa-arrow-up-to-line mr-10\"></i>\n              Back to top\n            </Button>\n          )}\n\n          <Stack direction=\"row\" justifyContent=\"center\">\n            <QueryPagination\n              queryInfo={queryInfo}\n              data={data}\n              threshold={props.threshold}\n            />\n          </Stack>\n\n          {isFetching && !isFetchingNextPage ? (\n            <Stack className=\"mt-6\" alignItems=\"center\" spacing={1}>\n              <p className=\"font-semibold\">Background Updating...</p>\n              <LinearProgress className=\"w-full\" color=\"primary\" />\n            </Stack>\n          ) : null}\n        </>\n      )}\n    </div>\n  )\n})\n\nInfiniteQueryList.defaultProps = {\n  wrapperListItem: true\n}\n\nexport default InfiniteQueryList","import React, { Fragment, useMemo } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { useStore } from '../../context'\nimport { useInit } from '../../hooks'\nimport fetchData from '../../utils/fetchData'\nimport QueryPagination from '../QueryPagination/QueryPagination'\nimport { Alert, LinearProgress, Stack } from '@mui/material'\nimport { useUpdateEffect } from 'react-use'\nimport $ from 'jquery'\nimport { get } from 'lodash'\n\nfunction SimpleQueryList(props) {\n  const { renderListItem: ListItem, renderList: List, onRowClicked } = props\n\n  const [queryKey, selected, setSelected] = useStore('queryKey, selected, setSelected')\n\n  const queryInfo = useQuery(queryKey, fetchData, {\n    keepPreviousData: true,\n    staleTime: 5000,\n  })\n\n  const { isLoading, isSuccess, isFetching, error, data } = queryInfo\n\n  useInit(props)\n\n  useUpdateEffect(() => {\n    $(props.scrollTarget || window).scrollTop(0)\n  }, [data])\n\n  const firstRow = useMemo(() => get(data, 'data.0'), [get(data, 'data.0')])\n\n  return (\n    <Stack spacing={1.5}>\n      {isLoading && <LinearProgress />}\n      {error?.message && (\n        <Alert variant=\"filled\" severity=\"error\">\n          {error?.message}\n        </Alert>\n      )}\n\n      {isSuccess && (\n        <>\n          <List meta={data?.meta} firstRow={firstRow}>\n            {data?.data?.map((item, key) => {\n              let serial = data.meta.from + key,\n                  listItemProps = {\n                  key,\n                  serial: data.meta.from + key,\n                  data: item,\n                  meta: data?.meta,\n                  onRowClicked: (e, data) => {\n                    let itemSelected = selected === serial ? false : serial\n                    setSelected(itemSelected)\n                    onRowClicked(e, { item, selected: itemSelected })\n                  },\n              }\n\n              return <ListItem {...listItemProps}/>\n            })}\n          </List>\n          {isFetching && <LinearProgress />}\n        </>\n      )}\n\n      {data?.meta && (\n        <QueryPagination\n          meta={data.meta}\n          size={props.perPage}\n          sizes={props.sizes}\n        />\n      )}\n    </Stack>\n  )\n}\n\nexport default SimpleQueryList","import numeral from 'numeral'\r\n\r\nfunction formatNumber(number, format = '0,0') {\r\n  return numeral(number).format(format)\r\n}\r\n\r\nexport default formatNumber","import formatNumber from './formatNumber'\r\nimport { Divider, Stack } from '@mui/material'\r\n\r\nfunction renderList({ children, meta, ...props }) {\r\n  return (\r\n    <Stack spacing={1}>\r\n      <div>\r\n        Kết quả từ {formatNumber(meta.from)}-{formatNumber(meta.to)} trong số{' '}\r\n        {formatNumber(meta.total)}\r\n      </div>\r\n\r\n      <Stack\r\n        spacing={2}\r\n        divider={<Divider orientation=\"horizontal\" />}\r\n        sx={{ py: 2 }}\r\n      >\r\n        {children}\r\n      </Stack>\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default renderList","import { includes } from 'lodash'\nimport { INFINITE_LOADING, LOAD_MORE, SIMPLE } from '../../constants'\nimport React, { forwardRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport InfiniteQueryList from './InfiniteQueryList'\nimport SimpleQueryList from './SimpleQueryList'\nimport { createStore, Provider } from '../../context'\nimport { useScrollList } from '../../hooks'\nimport renderListItem from '../../utils/renderListItem'\nimport renderList from '../../utils/renderList'\n\nconst QueryList = forwardRef((props, ref) => {\n  const scrollPosition = useScrollList(props)\n\n  const queryListProps = {\n    ...props,\n    scrollPosition\n  }\n\n  return (\n    <Provider createStore={createStore}>\n      {includes([LOAD_MORE, INFINITE_LOADING], props.pagination) ? (\n        <InfiniteQueryList ref={ref} {...queryListProps} />\n      ) : (\n        <SimpleQueryList ref={ref} {...queryListProps} />\n      )}\n    </Provider>\n  )\n})\n\nQueryList.propTypes = {\n  queryKey: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  url: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  pagination: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  perPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  select: PropTypes.func,\n  threshold: PropTypes.number,\n\n  scrollTop: PropTypes.bool,\n  scrollTarget: PropTypes.string,\n}\n\nQueryList.defaultProps = {\n  pagination: SIMPLE,\n  page: 1,\n  perPage: 10,\n  renderListItem: renderListItem,\n  renderList: renderList,\n  backToTop: false,\n  onRowClicked: () => {}\n}\n\nexport default QueryList\n","function renderListItem({serial, data}){\r\n  return (\r\n    <div>\r\n      {serial}) {data.id}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default renderListItem"],"names":["SIMPLE","ADVANCED","LOAD_MORE","LINKS","INFINITE_LOADING","PAGINATION_TYPES","simple","links","advanced","createStore","create","set","get","pagination","queryKey","init","props","castArray","url","params","page","perPage","selected","setSelected","setPage","produce","state","setPerPage","computed","this","context","createContext","Provider","useStore","selector","equalityFn","stateHook","indexOf","split","map","part","trim","prop","shallow","useInit","queryClient","useQueryClient","useEffect","isEmpty","cancelQueries","JSON","stringify","async","pageParam","signal","_queryKey$","_objectWithoutPropertiesLoose","_excluded","request","isString","method","_extends","isUndefined","axios","data","Simple","meta","React","createElement","MuiPagination","variant","showFirstButton","showLastButton","onChange","event","value","count","last_page","current_page","sizes","size","lastPage","handleGoto","inputPage","parseInt","target","key","type","alert","sizeList","useMemo","flow","uniq","sortBy","concat","console","log","Stack","direction","spacing","alignItems","justifyContent","shape","TextField","select","label","style","width","k","MenuItem","defaultValue","Typography","onKeyUp","onBlur","Advanced","defaultProps","QueryPagination","Component","component","isValidElement","types","propTypes","PropTypes","oneOfType","string","func","items","usePagination","filteredItems","filter","item","includes","List","index","_ref","Button","queryInfo","isFetchingNextPage","fetchNextPage","hasNextPage","onClick","disabled","threshold","LinearProgress","className","color","InView","as","inView","InfiniteQueryList","forwardRef","ref","_data$pages","_props$scrollPosition","renderListItem","ListItem","renderList","wrapperListItem","onRowClicked","useInfiniteQuery","fetchData","getPreviousPageParam","firstPage","allPages","previousPage","undefined","getNextPageParam","nextPage","status","error","isFetching","isFetchingPreviousPage","fetchPreviousPage","hasPreviousPage","firstRow","last","pages","message","pageIndex","Fragment","itemIndex","from","listItemProps","serial","e","itemSelected","Box","length","entry","has","handleNextPage","backToTop","scrollPosition","y","scrollTo","document","querySelector","scrollTarget","window","top","duration","sx","bottom","right","zIndex","InfiniteQueryList$1","SimpleQueryList","useQuery","keepPreviousData","staleTime","isLoading","isSuccess","useUpdateEffect","$","scrollTop","Alert","severity","_data$data","formatNumber","number","format","numeral","QueryList","scrollIndex","wait","useRef","position","setPostion","useRafState","x","handler","useCallback","positionKeys","current","addEventListener","debounce","removeEventListener","setTimeout","useScrollList","queryListProps","array","object","bool","id","children","to","total","divider","Divider","orientation","py","QueryList$1"],"mappings":"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"}