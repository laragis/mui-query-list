{"version":3,"file":"index.modern.mjs","sources":["../src/constants.js","../src/context.js","../src/hooks.js","../src/utils/fetchData.js","../src/components/QueryPagination/types/Simple.js","../src/components/QueryPagination/types/Advanced.js","../src/components/QueryPagination/types/Links.js","../src/components/QueryPagination/QueryPagination.js","../src/utils/detectReactObject.js","../src/components/QueryList/InfiniteQueryList.js","../src/components/QueryList/SimpleQueryList.js","../src/utils/formatNumber.js","../src/components/QueryPagination/types/LoadMore.js","../src/components/QueryPagination/types/InfiniteLoading.js","../src/utils/renderList.js","../src/components/QueryList/QueryList.js","../src/utils/renderListItem.js"],"sourcesContent":["export const SIMPLE = 'simple'\nexport const ADVANCED = 'advanced'\nexport const LOAD_MORE = 'load-more'\nexport const LINKS = 'links'\nexport const INFINITE_LOADING = 'infinite-loading'\n\nexport const PAGINATION_TYPES = {\n  [SIMPLE]: 'Simple',\n  [LINKS]: 'Links',\n  [ADVANCED]: 'Advanced',\n  [LOAD_MORE]: 'Load More',\n  [INFINITE_LOADING]: 'Infinite Loading',\n}","import create from 'zustand-store-addons'\nimport createContext from 'zustand/context'\nimport shallow from 'zustand/shallow'\nimport { SIMPLE } from './constants'\nimport produce from 'immer'\nimport { get } from 'lodash'\n\nconst initialState = {\n  pagination: SIMPLE,\n  queryKey: [],\n}\n\nexport const createStore = () => create((set, get) => ({\n  ...initialState,\n\n  init: (props) => {\n    let queryKey = [\n      props.queryKey,\n      {\n        url: props.url,\n        pagination: props.pagination,\n        params: {\n          page: props.page > 0 ? props.page : 1,\n          perPage: props.perPage > 0 ? props.perPage : 20,\n        }\n      }\n    ]\n\n    set({\n      queryKey,\n      pagination: props.pagination\n    })\n  },\n\n  setPage: (page) => set(\n    produce((state) => {\n      state.queryKey[1].params.page = page\n    })\n  ),\n\n  setPerPage: (perPage) => set(\n    produce((state) => {\n      state.queryKey[1].params.perPage = perPage\n    })\n  ),\n}), {\n  computed: {\n    perPage(){\n      return get(this.queryKey, `1.params.perPage`)\n    },\n\n    page(){\n      return get(this.queryKey, `1.params.page`)\n    }\n  }\n})\n\n\nconst context = createContext()\n\nexport const Provider = context.Provider\n\nexport const useStore = (selector, equalityFn) => {\n  return context.useStore(...stateHook(selector, equalityFn))\n}\n\nconst stateHook = (selector, equalityFn) => {\n  if (typeof selector === 'string') {\n    if (selector.indexOf(',') !== -1) {\n      const props = selector.split(',').map(part => part.trim())\n      return [state => props.map(prop => state[prop]), shallow]\n    }\n    return [state => state[selector], equalityFn]\n  }\n  return [selector, equalityFn]\n}\n\n\n// import axios from \"axios\";\n// import { defaultTo, includes, isString, mapKeys, mapValues } from 'lodash'\n// import { SIMPLE } from '../constants'\n//\n// // const requestWatchers = mapValues(mapKeys(['page', 'perPage']), (name) => function(newValue, preValue){\n// //   console.log(name, newValue, preValue);\n// //   this.get().fetchData()\n// // })\n//\n// const defaultPage = 1\n// const defaultPerPage = 10\n//\n// const useQueryStore = create(\n//   (set, get) => ({\n//     loading: false,\n//     setLoading: (loading) => set({ loading }),\n//\n//     url: null,\n//     setUrl: (url) => set({ url }),\n//\n//     pagination: SIMPLE,\n//     setPagination: (pagination) => set({ pagination }),\n//\n//     page: defaultPage,\n//     setPage: (payload) => {\n//       let page = parseInt(payload)\n//\n//       if(page > 0) set({ page })\n//       if(isNaN(page)) set({ page: defaultPage })\n//     },\n//\n//     perPage: defaultPerPage,\n//     setPerPage: (payload) => {\n//       let perPage = parseInt(payload)\n//\n//       if(perPage > 0) set({ perPage })\n//       if(isNaN(perPage)) set({ perPage: defaultPerPage })\n//     },\n//\n//     lastPage: null,\n//\n//     data: [],\n//     setData: (data) => set({ data }),\n//\n//     meta: null,\n//     links: null,\n//     setResponse: (resp) => {\n//       let meta = resp.meta,\n//           data = resp.data\n//\n//       if(includes(['load-more', 'infinite-loading'], get().pagination)) {\n//         meta.from = 1\n//         data = get().data.concat(data)\n//       }\n//\n//       set({\n//         meta,\n//         links: resp.links,\n//         data,\n//         lastPage: resp.meta.last_page\n//       })\n//     },\n//\n//     init: (props) => {\n//       let page = defaultTo(props.page, 1),\n//         perPage = props.perPage,\n//         pagination = defaultTo(props.pagination, 'simple'),\n//         initPage = page,\n//         initPerPage = perPage\n//\n//       if (pagination === 'load-more' && page > 1) {\n//         initPage = 1\n//         initPerPage = perPage * page\n//       }\n//\n//       set({\n//         url: props.url,\n//         page,\n//         perPage,\n//         pagination\n//       })\n//\n//       get().fetchData({\n//         page: initPage,\n//         perPage: initPerPage\n//       })\n//     },\n//\n//     reset: () => {\n//       set({\n//         page: 1,\n//         data: [],\n//       })\n//     },\n//\n//     fetchData: async (params) => {\n//       get().setLoading(true)\n//\n//       try {\n//         const response = await axios(get().getRequest(params)).then(resp => resp.data)\n//         get().setResponse(response)\n//       } catch (err){\n//         console.error(err);\n//       } finally {\n//         get().setLoading(false)\n//       }\n//     },\n//\n//     handleSuccess: null,\n//\n//     setHandleSuccess: (handleSuccess) => set({handleSuccess}),\n//\n//     nextPage: () => {\n//       get().hasNextPage && get().setPage(get().page+1)\n//     },\n//\n//     getRequest: (params = {}) => {\n//       const { page = get().page, perPage = get().perPage} = params\n//\n//       if(isString(get().url)) {\n//         return {\n//           method: 'get',\n//           url: get().url,\n//           params: {\n//             page,\n//             perPage\n//           }\n//         }\n//       }\n//\n//       return get().url\n//     },\n//   }),\n//   {\n//     computed: {\n//\n//       response: function() {\n//         return {\n//           meta: this.meta,\n//           links: this.links,\n//           data: this.data,\n//         }\n//       },\n//\n//       hasNextPage: function(){\n//         return this.page <= this.lastPage\n//       },\n//\n//       hasGoTo: function(){\n//         return this.page <= this.lastPage\n//       }\n//     },\n//     watchers: {\n//\n//     },\n//     middleware: [],\n//     settings: {},\n//   }\n// )\n//\n// export default useQueryStore","import { useQueryClient } from '@tanstack/react-query'\nimport { useStore } from './context'\nimport { useCallback, useEffect, useRef } from 'react'\nimport { debounce, isEmpty } from 'lodash'\nimport { useRafState } from 'react-use'\nimport $ from 'jquery'\n\nexport const useInit = (props) => {\n  const queryClient = useQueryClient()\n\n  const [queryKey, init] = useStore('queryKey, init')\n\n  useEffect(() => {\n    !isEmpty(queryKey) && queryClient.cancelQueries(queryKey)\n\n    init(props)\n  }, [props.queryKey, props.url, props.page, props.perPage])\n}\n\nexport const useScrollList = ({scrollTarget, scrollIndex, scrollTop, wait = 300}) => {\n  const ref = useRef()\n\n  const [position, setPostion] = useRafState({\n    x: 0,\n    y: 0,\n  });\n\n  const handler = useCallback((event) => {\n    let positionKeys = scrollTarget ? {x: 'scrollLeft', y: 'scrollTop'} : {x: 'pageXOffset', y: 'pageYOffset'}\n\n    setPostion({\n      x:  ref.current[positionKeys.x],\n      y:  ref.current[positionKeys.y],\n    });\n  }, [scrollTarget])\n\n  useEffect(() => {\n    ref.current = scrollTarget ? document.querySelector(scrollTarget) : window\n\n    ref.current.addEventListener('scroll', debounce(handler, wait));\n\n    return () => {\n      ref.current.removeEventListener('scroll', handler);\n    }\n\n  }, [])\n\n\n  useEffect(() => {\n    // console.log($(`#item-${scrollIndex}`).get(0), scrollIndex);\n    // let element = $(`#item-${scrollIndex}`).get(0)\n    // if(element) scrollIntoView(element, $(scrollTarget).get(0))\n\n    setTimeout(() => {\n      console.log(scrollTarget);\n      scrollTo($(scrollTarget).get(0))\n    }, 1000)\n    // console.log(scrollIndex);\n  }, [scrollIndex])\n\n  return position\n}","import { isString, isUndefined } from 'lodash'\nimport axios from 'axios'\n\nconst fetchData = async ({ meta, pageParam, queryKey, signal }) => {\n  const { url, params, ...rest } = queryKey[1]\n\n  const request = isString(url)\n    ? {\n        method: 'get',\n        ...params,\n      }\n    : {\n        params: {\n          ...params,\n          ...url?.params,\n        },\n        ...url,\n      }\n\n  if (!isUndefined(pageParam)) request.params.page = pageParam\n\n  const response = await axios({\n    signal,\n    ...request,\n  })\n\n  return response.data\n}\n\nexport default fetchData","import React from 'react'\nimport { Pagination as MuiPagination } from '@mui/material'\nimport { useStore } from '../../../context'\n\nfunction Simple({ meta }) {\n  const setPage = useStore('setPage')\n\n  const onChange = (event, value) => setPage(value)\n\n  return (\n    <MuiPagination\n      variant=\"outlined\"\n      showFirstButton\n      showLastButton\n      onChange={onChange}\n      count={meta?.last_page}\n      page={meta?.current_page}\n    />\n  )\n}\n\nexport default Simple","import {\n  MenuItem,\n  Pagination as MuiPagination,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport React, { useMemo } from 'react'\nimport { useStore } from '../../../context'\nimport { flow, sortBy, uniq } from 'lodash'\n\nfunction Advanced({ meta, sizes, size }) {\n  const [perPage, setPerPage, setPage] = useStore(\n    'perPage, setPerPage, setPage'\n  )\n  const lastPage = meta?.last_page\n  const page = meta?.current_page\n\n  const onChange = (event, value) => setPage(value)\n\n  const handleGoto = (event) => {\n    let inputPage = parseInt(event.target.value)\n\n    if (\n      (event.key === 'Enter' || event.type === 'blur') &&\n      inputPage > 0 &&\n      inputPage !== page\n    ) {\n      if (inputPage <= lastPage) {\n        setPage(inputPage)\n      } else {\n        alert(`Not found page ${inputPage}`)\n      }\n    }\n  }\n\n  const handleSizeChange = (event) => setPerPage(parseInt(event.target.value))\n\n  const sizeList = useMemo(\n    () => flow([uniq, sortBy])(sizes.concat(size)),\n    [sizes, size]\n  )\n\n  console.log(sizeList)\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <MuiPagination\n        variant=\"outlined\"\n        showFirstButton\n        showLastButton\n        shape=\"rounded\"\n        onChange={onChange}\n        count={lastPage}\n        page={page}\n      />\n      <TextField\n        select\n        label=\"Size\"\n        value={perPage}\n        onChange={handleSizeChange}\n        size=\"small\"\n        style={{ width: 110 }}\n      >\n        {sizeList.map((value, k) => (\n          <MenuItem key={k} value={value} defaultValue>\n            {value} / page\n          </MenuItem>\n        ))}\n      </TextField>\n      <Typography>Go to</Typography>\n      <TextField\n        label=\"Page\"\n        variant=\"outlined\"\n        onKeyUp={handleGoto}\n        onBlur={handleGoto}\n        size=\"small\"\n        type=\"number\"\n        style={{ width: 85 }}\n      />\n    </Stack>\n  )\n}\n\nAdvanced.defaultProps = {\n  sizes: [10, 20, 50, 100, 200],\n}\n\nexport default Advanced\n","import React from 'react'\nimport { Button, List } from '@mui/material'\nimport { usePagination } from '@mui/lab'\nimport { filter, includes } from 'lodash'\nimport { useStore } from '../../../context'\n\nfunction Links({ meta }) {\n  const setPage = useStore('setPage')\n\n  const { items } = usePagination({\n    count: meta?.last_page,\n    onChange: (event, value) => setPage(value),\n  })\n\n  const filteredItems = filter(items, (item) =>\n    includes(['previous', 'next'], item.type)\n  )\n\n  return (\n    <nav>\n      <List>\n        {filteredItems.map(({ page, type, selected, ...item }, index) => {\n          return (\n            <Button type=\"button\" {...item} key={index}>\n              {type}\n            </Button>\n          )\n        })}\n      </List>\n    </nav>\n  )\n}\n\nexport default Links","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { get } from 'lodash'\n\nimport Simple from './types/Simple'\nimport Advanced from './types/Advanced'\nimport LoadMore from './types/LoadMore'\nimport Links from './types/Links'\nimport InfiniteLoading from './types/InfiniteLoading'\nimport { ADVANCED, INFINITE_LOADING, LINKS, LOAD_MORE, SIMPLE } from '../../constants'\nimport { isFunctionComponent } from '../../utils/detectReactObject'\nimport { useStore } from '../../context'\n\nfunction QueryPagination(props) {\n  const type = useStore('pagination')\n\n  const Component = isFunctionComponent(type) ? type : get(QueryPagination.types, type, Simple)\n\n  return <Component {...props} />\n}\n\nQueryPagination.propTypes = {\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n}\n\nQueryPagination.types = {\n  [SIMPLE]: Simple,\n  [LINKS]: Links,\n  [ADVANCED]: Advanced,\n  [LOAD_MORE]: LoadMore,\n  [INFINITE_LOADING]: InfiniteLoading,\n}\n\nexport default QueryPagination;","import { isValidElement } from 'react'\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' && !!component.prototype?.isReactComponent\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return (\n    typeof component === 'function' &&\n    // && !!String(component).includes('return React.createElement')  // may fails\n    isValidElement(component())\n  )\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component)\n}\n\nfunction isElement(element) {\n  return isValidElement(element)\n}\n\nfunction isDOMTypeElement(element) {\n  return isElement(element) && typeof element.type === 'string'\n}\n\nfunction isCompositeTypeElement(element) {\n  return isElement(element) && typeof element.type === 'function'\n}\n\nexport {\n  isClassComponent,\n  isFunctionComponent,\n  isReactComponent,\n  isElement,\n  isDOMTypeElement,\n  isCompositeTypeElement,\n}","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { InView } from 'react-intersection-observer'\nimport { has } from 'lodash'\nimport React, { Fragment } from 'react'\nimport { INFINITE_LOADING } from '../../constants'\nimport { Box, Button, LinearProgress, Stack } from '@mui/material'\nimport { useInit } from '../../hooks'\nimport { useStore } from '../../context'\nimport fetchData from '../../utils/fetchData'\nimport QueryPagination from '../QueryPagination/QueryPagination'\nimport { scrollTo } from 'scroll-js'\n\nfunction InfiniteQueryList(props) {\n  const { renderListItem: ListItem, renderList: List } = props\n\n  const queryKey = useStore('queryKey')\n\n  const queryInfo = useInfiniteQuery(queryKey, fetchData, {\n    getPreviousPageParam: (firstPage, allPages) => {\n      let previousPage = firstPage.meta.current_page - 1\n      return previousPage > 0 ? previousPage : undefined\n    },\n    getNextPageParam: (lastPage, allPages) => {\n      let nextPage = lastPage.meta.current_page + 1\n      return nextPage <= lastPage.meta.last_page ? nextPage : undefined\n    },\n  })\n\n  const {\n    status,\n    data,\n    error,\n    isFetching,\n    isFetchingNextPage,\n    isFetchingPreviousPage,\n    fetchNextPage,\n    fetchPreviousPage,\n    hasNextPage,\n    hasPreviousPage,\n  } = queryInfo\n\n  useInit(props)\n\n  const handleNextPage = (inView, entry, index) => {\n    if (inView && hasNextPage && !has(data, ['pages', index + 1])) {\n      fetchNextPage()\n    }\n  }\n\n  const onScrollTop = () => {\n    scrollTo(document.querySelector(props.scrollTarget) || window, {\n      top: 0,\n      duration: 200,\n    })\n  }\n\n  return (\n    <div>\n      {status === 'loading' ? (\n        <p>Loading...</p>\n      ) : status === 'error' ? (\n        <span>Error: {error.message}</span>\n      ) : (\n        <>\n          {props.page > 1 && (\n            <Button\n              className=\"mb-6\"\n              onClick={() => fetchPreviousPage()}\n              disabled={!hasPreviousPage || isFetchingPreviousPage}\n            >\n              {isFetchingPreviousPage\n                ? 'Loading more...'\n                : hasPreviousPage\n                ? 'Load Older'\n                : 'Nothing more to load'}\n            </Button>\n          )}\n\n          {data.pages?.map((page, pageIndex) => (\n            <Fragment key={pageIndex}>\n              {page.data.map((item, itemIndex) => {\n                let Component = List,\n                  serial = itemIndex + page.meta.from\n\n                if (\n                  props.pagination === INFINITE_LOADING &&\n                  props.threshold &&\n                  props.threshold > 0 &&\n                  props.threshold <= page.data.length &&\n                  page.data.length - props.threshold === itemIndex + 1\n                ) {\n                  Component = InView\n                }\n\n                return (\n                  <Box\n                    key={itemIndex}\n                    component={Component}\n                    onChange={(inView, entry) =>\n                      handleNextPage(inView, entry, pageIndex)\n                    }\n                  >\n                    <ListItem serial={serial} data={item} meta={page.meta} />\n                  </Box>\n                )\n              })}\n            </Fragment>\n          ))}\n\n          {props.backToTop && props.scrollPosition?.y > 400 && (\n            <Button\n              onClick={onScrollTop}\n              className=\"fixed\"\n              sx={{ bottom: 90, right: 100, zIndex: 100 }}\n              variant=\"outlined\"\n            >\n              <i className=\"fa-solid fa-arrow-up-to-line mr-10\"></i>\n              Back to top\n            </Button>\n          )}\n\n          <Stack direction=\"row\" justifyContent=\"center\">\n            <QueryPagination\n              queryInfo={queryInfo}\n              data={data}\n              threshold={props.threshold}\n            />\n          </Stack>\n\n          {isFetching && !isFetchingNextPage ? (\n            <Stack className=\"mt-6\" alignItems=\"center\" spacing={1}>\n              <p className=\"font-semibold\">Background Updating...</p>\n              <LinearProgress className=\"w-full\" color=\"secondary\" />\n            </Stack>\n          ) : null}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default InfiniteQueryList","import React, {Fragment} from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport { useStore } from '../../context'\nimport { useInit } from '../../hooks'\nimport fetchData from '../../utils/fetchData'\nimport QueryPagination from '../QueryPagination/QueryPagination'\nimport { Alert, LinearProgress, Stack } from '@mui/material'\nimport { useUpdateEffect } from 'react-use'\nimport $ from 'jquery'\n\nfunction SimpleQueryList(props) {\n  const { renderListItem: ListItem, renderList: List } = props\n\n  const queryKey = useStore('queryKey')\n\n  const queryInfo = useQuery(queryKey, fetchData, {\n    keepPreviousData: true,\n    staleTime: 5000,\n  })\n\n  const { isLoading, isSuccess, isFetching, error, data } = queryInfo\n\n  useInit(props)\n\n  useUpdateEffect(() => {\n    $(props.scrollTarget || window).scrollTop(0)\n  }, [data])\n\n  return (\n    <Stack spacing={1.5}>\n      {isLoading && <LinearProgress />}\n      {error?.message && (\n        <Alert variant=\"filled\" severity=\"error\">\n          {error?.message}\n        </Alert>\n      )}\n\n      {isSuccess && (\n        <>\n          <List meta={data?.meta}>\n            {data?.data?.map((item, k) => {\n              return (\n                <ListItem\n                  key={k}\n                  serial={data.meta.from + k}\n                  data={item}\n                  meta={data?.meta}\n                />\n              )\n            })}\n          </List>\n          {isFetching && <LinearProgress />}\n        </>\n      )}\n\n      {data?.meta && (\n        <QueryPagination\n          meta={data.meta}\n          size={props.perPage}\n          sizes={props.sizes}\n        />\n      )}\n    </Stack>\n  )\n}\n\nexport default SimpleQueryList","import numeral from 'numeral'\r\n\r\nfunction formatNumber(number, format = '0,0') {\r\n  return numeral(number).format(format)\r\n}\r\n\r\nexport default formatNumber","import React from 'react'\nimport { Button } from '@mui/material'\n\nfunction LoadMore({ queryInfo }) {\n  const { isFetchingNextPage, fetchNextPage, hasNextPage } = queryInfo || {}\n\n  if (!hasNextPage) return 'Nothing more to load'\n\n  return (\n    <Button\n      variant=\"outlined\"\n      onClick={() => fetchNextPage()}\n      disabled={!hasNextPage || isFetchingNextPage}\n    >\n      {isFetchingNextPage ? 'Loading more...' : 'Load More'}\n    </Button>\n  )\n}\n\nexport default LoadMore\n","import React from 'react'\nimport { Button, LinearProgress, Stack } from '@mui/material'\nimport { InView } from 'react-intersection-observer'\n\nfunction InfiniteLoading({ queryInfo, data, threshold }) {\n  const { isFetchingNextPage, fetchNextPage, hasNextPage } = queryInfo || {}\n\n  const handleNextPage = (inView) => inView && hasNextPage && fetchNextPage()\n\n  if (!hasNextPage) return 'Nothing more to load'\n\n  if (isFetchingNextPage)\n    return <LinearProgress className=\"w-full mt-12\" color=\"secondary\" />\n\n  if (threshold) return null\n\n  return (\n    <Stack alignItems=\"center\">\n      <InView\n        as={Button}\n        onClick={() => fetchNextPage()}\n        disabled={!hasNextPage || isFetchingNextPage}\n        onChange={handleNextPage}\n      >\n        Load More\n      </InView>\n    </Stack>\n  )\n}\n\nexport default InfiniteLoading","import formatNumber from './formatNumber'\r\nimport { Divider, Stack } from '@mui/material'\r\n\r\nfunction renderList({ children, meta, ...props }) {\r\n  return (\r\n    <Stack spacing={1}>\r\n      <div>\r\n        Kết quả từ {formatNumber(meta.from)}-{formatNumber(meta.to)} trong số{' '}\r\n        {formatNumber(meta.total)}\r\n      </div>\r\n\r\n      <Stack\r\n        spacing={2}\r\n        divider={<Divider orientation=\"horizontal\" />}\r\n        sx={{ py: 2 }}\r\n      >\r\n        {children}\r\n      </Stack>\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default renderList","import { includes } from 'lodash'\nimport { INFINITE_LOADING, LOAD_MORE, SIMPLE } from '../../constants'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport InfiniteQueryList from './InfiniteQueryList'\nimport SimpleQueryList from './SimpleQueryList'\nimport { createStore, Provider } from '../../context'\nimport renderListItem from '../../utils/renderListItem'\nimport renderList from '../../utils/renderList'\nimport { useScrollList } from '../../hooks'\n\nfunction QueryList(props) {\n  const scrollPosition = useScrollList(props)\n\n  return (\n    <Provider createStore={createStore}>\n      {includes([LOAD_MORE, INFINITE_LOADING], props.pagination) ? (\n        <InfiniteQueryList {...props} scrollPosition={scrollPosition} />\n      ) : (\n        <SimpleQueryList {...props} scrollPosition={scrollPosition} />\n      )}\n    </Provider>\n  )\n}\n\nQueryList.propTypes = {\n  queryKey: PropTypes.string,\n  url: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  pagination: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  page: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  perPage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  select: PropTypes.func,\n  threshold: PropTypes.number,\n\n  scrollTop: PropTypes.bool,\n  scrollTarget: PropTypes.string,\n}\n\nQueryList.defaultProps = {\n  pagination: SIMPLE,\n  page: 1,\n  perPage: 10,\n  renderListItem: renderListItem,\n  renderList: renderList,\n  backToTop: false,\n}\n\nexport default QueryList\n","function renderListItem({serial, data}){\r\n  return (\r\n    <div>\r\n      {serial}) {data.id}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default renderListItem"],"names":["SIMPLE","ADVANCED","LOAD_MORE","LINKS","INFINITE_LOADING","PAGINATION_TYPES","simple","links","advanced","initialState","pagination","queryKey","createStore","create","set","get","init","props","url","params","page","perPage","setPage","produce","state","setPerPage","computed","this","context","createContext","Provider","useStore","selector","equalityFn","stateHook","indexOf","split","map","part","trim","prop","shallow","useInit","queryClient","useQueryClient","useEffect","isEmpty","cancelQueries","async","pageParam","signal","_queryKey$","_objectWithoutPropertiesLoose","_excluded","request","isString","_extends","method","isUndefined","axios","data","Simple","meta","React","createElement","MuiPagination","variant","showFirstButton","showLastButton","onChange","event","value","count","last_page","current_page","sizes","size","lastPage","handleGoto","inputPage","parseInt","target","key","type","alert","sizeList","useMemo","flow","uniq","sortBy","concat","console","log","Stack","direction","spacing","alignItems","justifyContent","shape","TextField","select","label","style","width","k","MenuItem","defaultValue","Typography","onKeyUp","onBlur","Advanced","defaultProps","QueryPagination","Component","component","isValidElement","types","_data$pages","_props$scrollPosition","renderListItem","ListItem","renderList","List","queryInfo","useInfiniteQuery","fetchData","getPreviousPageParam","firstPage","allPages","previousPage","undefined","getNextPageParam","nextPage","status","error","isFetching","isFetchingNextPage","isFetchingPreviousPage","fetchNextPage","fetchPreviousPage","hasNextPage","hasPreviousPage","message","Fragment","Button","className","onClick","disabled","pages","pageIndex","item","itemIndex","threshold","length","InView","Box","inView","entry","index","has","handleNextPage","serial","from","backToTop","y","scrollPosition","scrollTo","document","querySelector","scrollTarget","window","top","duration","sx","bottom","right","zIndex","LinearProgress","color","SimpleQueryList","_data$data","useQuery","keepPreviousData","staleTime","isLoading","isSuccess","useUpdateEffect","$","scrollTop","Alert","severity","formatNumber","number","format","numeral","propTypes","PropTypes","oneOfType","string","func","items","usePagination","filteredItems","filter","includes","_ref","as","QueryList","scrollIndex","wait","ref","useRef","position","setPostion","useRafState","x","handler","useCallback","positionKeys","current","addEventListener","debounce","removeEventListener","setTimeout","useScrollList","InfiniteQueryList","object","bool","id","children","to","total","divider","Divider","orientation","py"],"mappings":"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"}